#!/usr/bin/env python

Import('env')
from compat import isbasestring

# Not building in a separate env as scene needs it

# Thirdparty source files
if (env['builtin_freetype'] != 'no'):
    thirdparty_dir = "#thirdparty/freetype/"
    thirdparty_sources = [
        "src/autofit/autofit.c",
        "src/base/ftapi.c",
        "src/base/ftbase.c",
        "src/base/ftbbox.c",
        "src/base/ftbdf.c",
        "src/base/ftbitmap.c",
        "src/base/ftcid.c",
        "src/base/ftdebug.c",
        "src/base/ftfntfmt.c",
        "src/base/ftfstype.c",
        "src/base/ftgasp.c",
        "src/base/ftglyph.c",
        "src/base/ftgxval.c",
        "src/base/ftinit.c",
        "src/base/ftlcdfil.c",
        "src/base/ftmm.c",
        "src/base/ftotval.c",
        "src/base/ftpatent.c",
        "src/base/ftpfr.c",
        "src/base/ftpic.c",
        "src/base/ftstroke.c",
        "src/base/ftsynth.c",
        "src/base/ftsystem.c",
        "src/base/fttype1.c",
        "src/base/ftwinfnt.c",
        "src/bdf/bdf.c",
        "src/bzip2/ftbzip2.c",
        "src/cache/ftcache.c",
        "src/cff/cff.c",
        "src/cid/type1cid.c",
        "src/gxvalid/gxvalid.c",
        "src/gzip/ftgzip.c",
        "src/lzw/ftlzw.c",
        "src/otvalid/otvalid.c",
        "src/pcf/pcf.c",
        "src/pfr/pfr.c",
        "src/psaux/psaux.c",
        "src/pshinter/pshinter.c",
        "src/psnames/psnames.c",
        "src/raster/raster.c",
        "src/sfnt/sfnt.c",
        "src/smooth/smooth.c",
        "src/truetype/truetype.c",
        "src/type1/type1.c",
        "src/type42/type42.c",
        "src/winfonts/winfnt.c",
    ]
    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    # Include header for WinRT to fix build issues
    if "platform" in env and env["platform"] == "winrt":
        env.Append(CCFLAGS=['/FI', '"modules/freetype/winrtdef.h"'])

    env.Append(CPPPATH=[thirdparty_dir, thirdparty_dir + "/include"])

    # also requires libpng headers
    if (env['builtin_libpng'] != 'no'):
        env.Append(CPPPATH=["#thirdparty/libpng"])

    lib = env.add_library("freetype_builtin", thirdparty_sources)
    # Needs to be appended to arrive after libscene in the linker call,
    # but we don't want it to arrive *after* system libs, so manual hack
    # LIBS contains first SCons Library objects ("SCons.Node.FS.File object")
    # and then plain strings for system library. We insert between the two.
    inserted = False
    for idx, linklib in enumerate(env["LIBS"]):
        if isbasestring(linklib): # first system lib such as "X11", otherwise SCons lib object
            env["LIBS"].insert(idx, lib)
            inserted = True
            break
    if not inserted:
        env.Append(LIBS=[lib])
    env.Append(CCFLAGS=['-DFT2_BUILD_LIBRARY'])
    if (env['target'] != 'release'):
        env.Append(CCFLAGS=['-DZLIB_DEBUG'])

# Godot source files
env.add_source_files(env.modules_sources, "*.cpp")
env.Append(CCFLAGS=['-DFREETYPE_ENABLED'])

Export('env')
